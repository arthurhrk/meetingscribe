import {
  ActionPanel,
  Action,
  List,
  showToast,
  Toast,
  getPreferenceValues,
  Detail,
  confirmAlert,
  Alert,
} from "@raycast/api";
import { useState, useEffect } from "react";
import { exec } from "child_process";
import { promisify } from "util";

const execAsync = promisify(exec);

interface Preferences {
  pythonPath: string;
  projectPath: string;
  defaultModel: string;
}

interface TeamsStatus {
  monitoring_active: boolean;
  teams_running: boolean;
  in_meeting: boolean;
  recording_active: boolean;
  current_meeting?: {
    title: string;
    start_time: string;
    recording_path: string;
    device_used: string;
  };
}

export default function TeamsMonitor() {
  const [status, setStatus] = useState<TeamsStatus | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const preferences = getPreferenceValues<Preferences>();

  useEffect(() => {
    loadTeamsStatus();
    // Atualizar status a cada 5 segundos
    const interval = setInterval(loadTeamsStatus, 5000);
    return () => clearInterval(interval);
  }, []);

  async function loadTeamsStatus() {
    try {
      setIsLoading(true);
      const { stdout } = await execAsync(
        `cd "${preferences.projectPath}" && ${preferences.pythonPath} -c "from teams_integration import get_teams_status; import json; print(json.dumps(get_teams_status()))"`,
      );

      const statusData = JSON.parse(stdout);
      setStatus(statusData);
    } catch (error) {
      showToast({
        style: Toast.Style.Failure,
        title: "Erro ao verificar Teams",
        message: "N√£o foi poss√≠vel verificar status do Teams",
      });
    } finally {
      setIsLoading(false);
    }
  }

  async function startMonitoring() {
    try {
      showToast({
        style: Toast.Style.Animated,
        title: "Iniciando monitoramento...",
        message: "Ativando detec√ß√£o autom√°tica de reuni√µes",
      });

      await execAsync(
        `cd "${preferences.projectPath}" && ${preferences.pythonPath} -c "from teams_integration import start_teams_monitoring; start_teams_monitoring()"`,
      );

      showToast({
        style: Toast.Style.Success,
        title: "Monitoramento ativo!",
        message: "Grava√ß√£o autom√°tica ligada para reuni√µes Teams",
      });

      await loadTeamsStatus();
    } catch (error) {
      showToast({
        style: Toast.Style.Failure,
        title: "Erro ao iniciar monitoramento",
        message: "N√£o foi poss√≠vel ativar o modo autom√°tico",
      });
    }
  }

  async function stopMonitoring() {
    try {
      const confirmed = await confirmAlert({
        title: "Parar monitoramento?",
        message: "Isso vai desativar a grava√ß√£o autom√°tica de reuni√µes",
        primaryAction: {
          title: "Parar Monitoramento",
          style: Alert.ActionStyle.Destructive,
        },
        dismissAction: {
          title: "Cancelar",
        },
      });

      if (!confirmed) return;

      showToast({
        style: Toast.Style.Animated,
        title: "Parando monitoramento...",
        message: "Desativando detec√ß√£o autom√°tica",
      });

      await execAsync(
        `cd "${preferences.projectPath}" && ${preferences.pythonPath} -c "from teams_integration import stop_teams_monitoring; stop_teams_monitoring()"`,
      );

      showToast({
        style: Toast.Style.Success,
        title: "Monitoramento parado",
        message: "Grava√ß√£o autom√°tica desativada",
      });

      await loadTeamsStatus();
    } catch (error) {
      showToast({
        style: Toast.Style.Failure,
        title: "Erro ao parar monitoramento",
        message: "N√£o foi poss√≠vel desativar o modo autom√°tico",
      });
    }
  }

  async function forceStopRecording() {
    try {
      await execAsync(
        `cd "${preferences.projectPath}" && ${preferences.pythonPath} -c "from teams_integration import _teams_integration; _teams_integration.stop_auto_recording() if '_teams_integration' in globals() else None"`,
      );

      showToast({
        style: Toast.Style.Success,
        title: "Grava√ß√£o finalizada",
        message: "Arquivo salvo com sucesso",
      });

      await loadTeamsStatus();
    } catch (error) {
      showToast({
        style: Toast.Style.Failure,
        title: "Erro ao parar grava√ß√£o",
        message: "N√£o foi poss√≠vel finalizar grava√ß√£o",
      });
    }
  }

  function getStatusIcon(isActive: boolean): string {
    return isActive ? "‚úÖ" : "‚ùå";
  }

  function getStatusColor(isActive: boolean): string {
    return isActive ? "#00AA00" : "#FF0000";
  }

  if (!status) {
    return <List isLoading={isLoading} />;
  }

  return (
    <List isLoading={isLoading}>
      <List.Section title="Teams Integration Status">
        <List.Item
          title="Monitoramento Autom√°tico"
          subtitle={
            status.monitoring_active
              ? "üü¢ Ativo - Detectando reuni√µes automaticamente"
              : "üî¥ Inativo - Clique para ativar"
          }
          icon={{
            source: getStatusIcon(status.monitoring_active),
            tintColor: getStatusColor(status.monitoring_active),
          }}
          actions={
            <ActionPanel>
              {!status.monitoring_active ? (
                <Action
                  title="Iniciar Monitoramento"
                  onAction={startMonitoring}
                  shortcut={{ modifiers: ["cmd"], key: "s" }}
                />
              ) : (
                <Action
                  title="Parar Monitoramento"
                  onAction={stopMonitoring}
                  shortcut={{ modifiers: ["cmd"], key: "x" }}
                />
              )}
              <Action
                title="Atualizar Status"
                onAction={loadTeamsStatus}
                shortcut={{ modifiers: ["cmd"], key: "r" }}
              />
            </ActionPanel>
          }
        />

        <List.Item
          title="Microsoft Teams"
          subtitle={
            status.teams_running
              ? "üü¢ Aplicativo rodando"
              : "üî¥ Teams n√£o detectado"
          }
          icon={{
            source: getStatusIcon(status.teams_running),
            tintColor: getStatusColor(status.teams_running),
          }}
        />

        <List.Item
          title="Status da Reuni√£o"
          subtitle={
            status.in_meeting
              ? "üü¢ Em reuni√£o ativa"
              : "üî¥ Fora de reuni√£o"
          }
          icon={{
            source: getStatusIcon(status.in_meeting),
            tintColor: getStatusColor(status.in_meeting),
          }}
        />

        <List.Item
          title="Grava√ß√£o Ativa"
          subtitle={
            status.recording_active
              ? "üî¥ Gravando agora"
              : "‚ö™ Nenhuma grava√ß√£o"
          }
          icon={{
            source: status.recording_active ? "üî¥" : "‚ö™",
            tintColor: status.recording_active ? "#FF0000" : "#888888",
          }}
          actions={
            status.recording_active ? (
              <ActionPanel>
                <Action
                  title="Parar Grava√ß√£o"
                  onAction={forceStopRecording}
                  shortcut={{ modifiers: ["cmd"], key: "enter" }}
                />
              </ActionPanel>
            ) : undefined
          }
        />
      </List.Section>

      {status.current_meeting && (
        <List.Section title="Reuni√£o Atual">
          <List.Item
            title={status.current_meeting.title}
            subtitle={`Iniciada: ${new Date(status.current_meeting.start_time).toLocaleTimeString()}`}
            accessories={[
              { text: `Dispositivo: ${status.current_meeting.device_used}` },
            ]}
            actions={
              <ActionPanel>
                <Action.Push
                  title="Ver Detalhes"
                  target={
                    <Detail
                      markdown={`# Reuni√£o em Andamento
                      
**T√≠tulo:** ${status.current_meeting.title}
**In√≠cio:** ${new Date(status.current_meeting.start_time).toLocaleString()}
**Arquivo:** ${status.current_meeting.recording_path}
**Dispositivo:** ${status.current_meeting.device_used}

## Status
‚úÖ **Grava√ß√£o ativa** - O √°udio est√° sendo capturado automaticamente

## A√ß√µes dispon√≠veis
- A grava√ß√£o ser√° finalizada automaticamente quando sair da reuni√£o
- Ou voc√™ pode parar manualmente usando o bot√£o "Parar Grava√ß√£o"
- Ap√≥s finalizada, a transcri√ß√£o poder√° ser feita automaticamente`}
                    />
                  }
                />
                <Action
                  title="Parar Grava√ß√£o Manual"
                  onAction={forceStopRecording}
                />
              </ActionPanel>
            }
          />
        </List.Section>
      )}

      <List.Section title="Instru√ß√µes">
        <List.Item
          title="Como usar o modo autom√°tico"
          subtitle="Clique para ver o guia completo"
          icon="üí°"
          actions={
            <ActionPanel>
              <Action.Push
                title="Ver Guia"
                target={
                  <Detail
                    markdown={`# ü§ñ Modo Autom√°tico MeetingScribe

## Como funciona

1. **Ative o monitoramento** clicando em "Iniciar Monitoramento"
2. **Entre em reuni√µes Teams normalmente**
3. **A grava√ß√£o inicia automaticamente** 3 segundos ap√≥s detectar a reuni√£o
4. **A grava√ß√£o para automaticamente** quando voc√™ sai da reuni√£o
5. **O arquivo fica salvo** em \`storage/recordings/\`

## Detec√ß√£o autom√°tica

‚úÖ **Detecta automaticamente:**
- Quando voc√™ entra em reuni√£o no Teams
- Usa o dispositivo de √°udio ativo do Windows
- Captura √°udio do sistema (o que voc√™ ouve)
- Nomes arquivos com base no t√≠tulo da reuni√£o

‚úÖ **Recursos inteligentes:**
- Monitoramento cont√≠nuo em background
- N√£o interfere com outras atividades
- Usa dispositivos de √°udio padr√£o automaticamente
- Salva metadados da reuni√£o junto com o √°udio

## Privacidade & Seguran√ßa

üîí **100% Local:**
- Nenhum dado enviado para servi√ßos externos
- Processamento totalmente offline
- Arquivos ficam no seu computador
- Voc√™ controla todos os dados

## Configura√ß√£o recomendada

1. **Deixe sempre ligado** para captura autom√°tica
2. **Configure dispositivos de √°udio** no Windows como desejar
3. **Verifique espa√ßo em disco** periodicamente
4. **Transcreveva arquivos** usando outros comandos do MeetingScribe

## Resolu√ß√£o de problemas

**Se n√£o detectar reuni√µes:**
- Verifique se Teams est√° rodando
- Confirme que est√° realmente em uma chamada
- Teste com uma reuni√£o de teste

**Se n√£o gravar √°udio:**
- Verifique dispositivos de √°udio no Windows
- Confirme que h√° √°udio sendo reproduzido
- Teste grava√ß√£o manual primeiro`}
                  />
                }
              />
            </ActionPanel>
          }
        />
      </List.Section>
    </List>
  );
}