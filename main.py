"""
MeetingScribe - Entry Point Principal

Sistema de transcri√ß√£o inteligente para reuni√µes usando OpenAI Whisper.
Processamento 100% local com identifica√ß√£o de speakers e interface Rica.

Author: MeetingScribe Team
Version: 1.0.0
Python: >=3.8
"""

import sys
import traceback
from pathlib import Path
from typing import NoReturn, Optional

from loguru import logger
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Confirm, Prompt
from rich.text import Text

try:
    from config import settings, setup_directories, setup_logging
except ImportError as e:
    print(f"‚ùå Erro cr√≠tico ao importar configura√ß√µes: {e}")
    print("Certifique-se de que:")
    print("‚Ä¢ O arquivo config.py existe no diret√≥rio raiz")
    print("‚Ä¢ As depend√™ncias est√£o instaladas: pip install -r requirements.txt")
    print("‚Ä¢ Execute: python system_check.py para diagn√≥stico completo")
    sys.exit(1)

console = Console()

def show_welcome_message() -> None:
    """
    Exibe mensagem de boas-vindas estilizada usando Rich.
    
    Mostra informa√ß√µes sobre o aplicativo, vers√£o e funcionalidades
    principais em um painel colorido e bem formatado.
    
    Returns:
        None
        
    Raises:
        RuntimeError: Se houver erro ao acessar configura√ß√µes do settings
    """
    try:
        welcome_text = Text()
        welcome_text.append("üé§ ", style="bold blue")
        welcome_text.append("MeetingScribe", style="bold blue")
        welcome_text.append(f" v{settings.app_version}", style="dim")
        welcome_text.append("\n\nSistema inteligente de transcri√ß√£o de reuni√µes", style="white")
        welcome_text.append("\nPowered by OpenAI Whisper", style="dim")
        
        panel = Panel(
            welcome_text,
            title="üéØ Bem-vindo",
            border_style="blue",
            padding=(1, 2)
        )
        
        console.print()
        console.print(panel)
        console.print()
        
    except Exception as e:
        logger.error(f"Erro ao exibir mensagem de boas-vindas: {e}")
        console.print("‚ùå [red]Erro ao carregar interface de boas-vindas[/red]")
        raise RuntimeError(f"Falha na inicializa√ß√£o da interface: {e}") from e

def initialize_system() -> None:
    """
    Inicializa todos os componentes essenciais do sistema.
    
    Executa sequencialmente:
    1. Configura√ß√£o e cria√ß√£o de diret√≥rios necess√°rios
    2. Inicializa√ß√£o do sistema de logging
    3. Verifica√ß√£o e valida√ß√£o das configura√ß√µes
    
    Returns:
        None
        
    Raises:
        FileNotFoundError: Se n√£o conseguir criar diret√≥rios necess√°rios
        PermissionError: Se n√£o tiver permiss√µes adequadas
        RuntimeError: Se houver falha na inicializa√ß√£o de componentes cr√≠ticos
    """
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
        transient=True
    ) as progress:
        
        # Task 1: Configura√ß√£o de diret√≥rios
        task1 = progress.add_task("Configurando diret√≥rios...", total=None)
        try:
            setup_directories()
            progress.update(task1, description="‚úÖ Diret√≥rios configurados")
            logger.debug(f"Diret√≥rios criados em: {settings.base_dir}")
        except (FileNotFoundError, PermissionError, OSError) as e:
            logger.error(f"Falha cr√≠tica ao configurar diret√≥rios: {e}")
            progress.update(task1, description="‚ùå Erro nos diret√≥rios")
            raise RuntimeError(f"N√£o foi poss√≠vel criar estrutura de diret√≥rios: {e}") from e
        except Exception as e:
            logger.error(f"Erro inesperado na configura√ß√£o de diret√≥rios: {e}")
            progress.update(task1, description="‚ùå Erro nos diret√≥rios")
            raise RuntimeError(f"Falha inesperada na configura√ß√£o: {e}") from e
        
        # Task 2: Inicializa√ß√£o do logging
        task2 = progress.add_task("Inicializando logging...", total=None)
        try:
            setup_logging()
            logger.info("Sistema MeetingScribe iniciado com sucesso")
            progress.update(task2, description="‚úÖ Logging inicializado")
        except (FileNotFoundError, PermissionError) as e:
            logger.error(f"Falha ao configurar logging: {e}")
            progress.update(task2, description="‚ùå Erro no logging")
            raise RuntimeError(f"N√£o foi poss√≠vel configurar sistema de logs: {e}") from e
        except Exception as e:
            progress.update(task2, description="‚ùå Erro no logging")
            raise RuntimeError(f"Falha inesperada no logging: {e}") from e
        
        # Task 3: Verifica√ß√£o de configura√ß√µes
        task3 = progress.add_task("Verificando configura√ß√µes...", total=None)
        try:
            # Valida√ß√µes b√°sicas de configura√ß√£o
            if not hasattr(settings, 'app_name') or not settings.app_name:
                raise ValueError("Nome da aplica√ß√£o n√£o configurado")
            
            if not hasattr(settings, 'app_version') or not settings.app_version:
                raise ValueError("Vers√£o da aplica√ß√£o n√£o configurada")
            
            if settings.debug:
                logger.debug("Modo DEBUG ativado - logs verbosos habilitados")
                logger.debug(f"Configura√ß√µes carregadas: {settings.model_dump()}")
            
            progress.update(task3, description="‚úÖ Configura√ß√µes verificadas")
            
        except (ValueError, AttributeError) as e:
            logger.error(f"Configura√ß√µes inv√°lidas detectadas: {e}")
            progress.update(task3, description="‚ùå Erro nas configura√ß√µes")
            raise RuntimeError(f"Configura√ß√µes do sistema inv√°lidas: {e}") from e
        except Exception as e:
            logger.error(f"Erro inesperado na verifica√ß√£o: {e}")
            progress.update(task3, description="‚ùå Erro nas configura√ß√µes")
            raise RuntimeError(f"Falha na verifica√ß√£o do sistema: {e}") from e

def show_main_menu() -> None:
    """
    Exibe o menu principal da aplica√ß√£o com op√ß√µes dispon√≠veis.
    
    Apresenta as funcionalidades principais em um painel estilizado,
    incluindo grava√ß√£o, transcri√ß√£o, gerenciamento e configura√ß√µes.
    
    Returns:
        None
        
    Note:
        Todas as op√ß√µes atualmente s√£o placeholders para desenvolvimento futuro.
    """
    menu_options = [
        "1. üéôÔ∏è  Iniciar nova grava√ß√£o",
        "2. üìù  Transcrever arquivo existente", 
        "3. üìÅ  Gerenciar transcri√ß√µes",
        "4. ‚öôÔ∏è  Configura√ß√µes",
        "5. üìä  Relat√≥rios",
        "6. ‚ùå  Sair"
    ]
    
    try:
        console.print(Panel(
            "\n".join(menu_options),
            title="üìã Menu Principal",
            border_style="cyan"
        ))
        logger.debug("Menu principal exibido com sucesso")
    except Exception as e:
        logger.error(f"Erro ao exibir menu principal: {e}")
        console.print("‚ùå [red]Erro ao carregar menu principal[/red]")
        # Fallback para menu simples em texto
        console.print("\nMenu Principal:")
        for option in menu_options:
            console.print(f"  {option}")

def handle_menu_choice() -> None:
    """
    Processa e executa as escolhas do usu√°rio no menu principal.
    
    Mant√©m um loop interativo at√© que o usu√°rio escolha sair.
    Cada op√ß√£o √© logada e executa funcionalidades placeholder.
    
    Returns:
        None
        
    Raises:
        KeyboardInterrupt: Se o usu√°rio interromper com Ctrl+C
        RuntimeError: Se houver erro cr√≠tico na interface
    """
    valid_choices = ["1", "2", "3", "4", "5", "6"]
    
    while True:
        try:
            console.print()
            choice = Prompt.ask(
                "Escolha uma op√ß√£o",
                choices=valid_choices,
                default="6"
            )
            
            # Log da escolha do usu√°rio
            logger.debug(f"Usu√°rio selecionou op√ß√£o: {choice}")
            
            if choice == "1":
                console.print("üéôÔ∏è [yellow]Funcionalidade de grava√ß√£o em desenvolvimento...[/yellow]")
                logger.info("Usu√°rio solicitou: Nova grava√ß√£o")
                
            elif choice == "2":
                console.print("üìù [yellow]Funcionalidade de transcri√ß√£o em desenvolvimento...[/yellow]")
                logger.info("Usu√°rio solicitou: Transcrever arquivo")
                
            elif choice == "3":
                console.print("üìÅ [yellow]Gerenciador de transcri√ß√µes em desenvolvimento...[/yellow]")
                logger.info("Usu√°rio solicitou: Gerenciar transcri√ß√µes")
                
            elif choice == "4":
                console.print("‚öôÔ∏è [yellow]Painel de configura√ß√µes em desenvolvimento...[/yellow]")
                logger.info("Usu√°rio solicitou: Configura√ß√µes")
                
            elif choice == "5":
                console.print("üìä [yellow]Sistema de relat√≥rios em desenvolvimento...[/yellow]")
                logger.info("Usu√°rio solicitou: Relat√≥rios")
                
            elif choice == "6":
                try:
                    if Confirm.ask("Deseja realmente sair?"):
                        console.print("üëã [green]Obrigado por usar o MeetingScribe![/green]")
                        logger.info("Usu√°rio encerrou o sistema normalmente")
                        break
                    else:
                        logger.debug("Usu√°rio cancelou a sa√≠da")
                except KeyboardInterrupt:
                    console.print("\nüëã [yellow]Sa√≠da for√ßada pelo usu√°rio[/yellow]")
                    logger.info("Usu√°rio for√ßou a sa√≠da com Ctrl+C")
                    break
            
            console.print()
            
        except KeyboardInterrupt:
            console.print("\n\nüõë [yellow]Opera√ß√£o interrompida pelo usu√°rio[/yellow]")
            logger.info("Menu interrompido pelo usu√°rio (Ctrl+C)")
            break
            
        except Exception as e:
            logger.error(f"Erro no processamento do menu: {e}")
            console.print(f"‚ùå [red]Erro no menu: {e}[/red]")
            console.print("Tentando continuar...")
            
            # Verificar se ainda √© poss√≠vel continuar
            try:
                if not Confirm.ask("Continuar usando o aplicativo?", default=True):
                    break
            except Exception:
                logger.error("Interface cr√≠tica falhou - encerrando")
                break

def main() -> int:
    """
    Fun√ß√£o principal e entry point do MeetingScribe.
    
    Coordena a inicializa√ß√£o completa do sistema, exibi√ß√£o da interface
    e execu√ß√£o do loop principal da aplica√ß√£o.
    
    Returns:
        int: C√≥digo de sa√≠da (0 para sucesso, 1 para erro)
        
    Raises:
        SystemExit: Em caso de erro cr√≠tico que impe√ßa a execu√ß√£o
    """
    exit_code = 0
    
    try:
        # Fase 1: Interface inicial
        logger.info(f"=== Iniciando {settings.app_name} v{settings.app_version} ===")
        show_welcome_message()
        
        # Fase 2: Inicializa√ß√£o do sistema
        logger.info("Iniciando processo de inicializa√ß√£o do sistema")
        initialize_system()
        
        # Fase 3: Confirma√ß√£o de inicializa√ß√£o
        console.print("‚úÖ [green]Sistema inicializado com sucesso![/green]")
        console.print()
        logger.info("Sistema MeetingScribe totalmente operacional")
        
        # Fase 4: Interface principal
        show_main_menu()
        handle_menu_choice()
        
        logger.info("Aplica√ß√£o encerrada normalmente")
        
    except KeyboardInterrupt:
        console.print("\n\nüõë [yellow]Opera√ß√£o cancelada pelo usu√°rio[/yellow]")
        logger.info("Sistema interrompido pelo usu√°rio (Ctrl+C)")
        exit_code = 130  # C√≥digo padr√£o Unix para SIGINT
        
    except RuntimeError as e:
        # Erros de runtime espec√≠ficos do sistema
        error_msg = f"Erro de execu√ß√£o: {str(e)}"
        console.print(f"\n‚ùå [red]{error_msg}[/red]")
        logger.error(error_msg)
        
        if hasattr(settings, 'debug') and settings.debug:
            console.print("\nüìã [dim]Detalhes t√©cnicos:[/dim]")
            console.print(traceback.format_exc())
        
        _show_troubleshooting_tips()
        exit_code = 1
        
    except (ImportError, ModuleNotFoundError) as e:
        # Erros de depend√™ncias
        error_msg = f"Depend√™ncia ausente: {str(e)}"
        console.print(f"\n‚ùå [red]{error_msg}[/red]")
        logger.error(error_msg)
        
        console.print("\nüí° [yellow]Solu√ß√µes sugeridas:[/yellow]")
        console.print("‚Ä¢ Execute: pip install -r requirements.txt")
        console.print("‚Ä¢ Verifique se est√° no ambiente virtual correto")
        console.print("‚Ä¢ Execute: python system_check.py")
        
        exit_code = 2
        
    except Exception as e:
        # Catch-all para erros inesperados
        error_msg = f"Erro cr√≠tico inesperado: {str(e)}"
        console.print(f"\n‚ùå [red]{error_msg}[/red]")
        
        # Tentar logar se poss√≠vel
        try:
            logger.critical(f"{error_msg}\n{traceback.format_exc()}")
        except Exception:
            pass  # Se logging falhar, n√£o podemos fazer nada
        
        if hasattr(settings, 'debug') and settings.debug:
            console.print("\nüìã [dim]Stack trace completo:[/dim]")
            console.print(traceback.format_exc())
        
        _show_troubleshooting_tips()
        exit_code = 3
    
    finally:
        # Cleanup final
        try:
            logger.info(f"Encerrando MeetingScribe com c√≥digo: {exit_code}")
        except Exception:
            pass  # Ignorar erros no cleanup
    
    return exit_code


def _show_troubleshooting_tips() -> None:
    """
    Exibe dicas de resolu√ß√£o de problemas para o usu√°rio.
    
    Fun√ß√£o auxiliar interna para mostrar informa√ß√µes de diagn√≥stico
    quando ocorrem erros no sistema.
    
    Returns:
        None
    """
    console.print("\nüí° [yellow]Dicas para resolu√ß√£o:[/yellow]")
    console.print("‚Ä¢ Execute 'python system_check.py' para verificar o sistema")
    console.print("‚Ä¢ Verifique se todas as depend√™ncias est√£o instaladas")
    console.print("‚Ä¢ Consulte os logs em 'logs/meetingscribe.log'")
    console.print("‚Ä¢ Verifique permiss√µes de escrita nos diret√≥rios")
    console.print("‚Ä¢ Tente executar como administrador se necess√°rio")

if __name__ == "__main__":
    sys.exit(main())